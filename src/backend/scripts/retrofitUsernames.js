// File: retrofitUsernames.js
// Path: src/backend/scripts/retrofitUsernames.js

import dotenv from 'dotenv';
import mongoose from 'mongoose';
import User from '../models/User.js';
import { faker } from '@faker-js/faker';
import fs from 'fs';
import path from 'path';

dotenv.config();

const MAX_UPDATES = 2000;
const fitnessTags = ['fit', 'lifts', 'squats', 'runner', 'gymrat', 'hiit', 'trainer', 'beast'];
const updatedUsers = [];

const looksAutoGenerated = (username) => {
  return (
    /\d{2,}$/.test(username) ||                // Ends in 2+ numbers
    /[a-z]+\.[a-z]+/.test(username) ||         // Contains dot format
    /[a-z]+_[a-z]+\d*/.test(username)          // Contains underscores + numbers
  );
};

const generateNewUsername = (firstName) => {
  const tag = faker.helpers.arrayElement(fitnessTags);
  const number = faker.number.int({ min: 1, max: 99 });
  return `${firstName.toLowerCase()}_${tag}${number}`;
};

const run = async () => {
  try {
    console.log('🔌 Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('✅ Connected to DB');

    const users = await User.find({}).limit(MAX_UPDATES);

    for (const user of users) {
      const original = user.username;
      const firstName = user.profile?.gender === 'Woman'
        ? faker.person.firstName('female')
        : faker.person.firstName('male');

      if (!looksAutoGenerated(original)) {
        continue; // skip real usernames
      }

      const newUsername = generateNewUsername(firstName);
      user.username = newUsername;
      await user.save();

      console.log(`🔁 Updated: ${original} → ${newUsername}`);
      updatedUsers.push({ id: user._id, from: original, to: newUsername });
    }

    // Save a log of changes
    const logPath = path.join(path.resolve(), 'usernameRetrofitLog.json');
    fs.writeFileSync(logPath, JSON.stringify(updatedUsers, null, 2));
    console.log(`📄 Log saved: ${logPath}`);
    console.log(`✅ Total usernames updated: ${updatedUsers.length}`);
    process.exit(0);

  } catch (err) {
    console.error('❌ Error:', err.message);
    process.exit(1);
  }
};

run();
